# --- START OF FILE front/interface.py ---

import streamlit as st
import pandas as pd
from datetime import datetime, time, timedelta
import time as py_time # Importa o m√≥dulo time com um alias para evitar conflitos

# Importa√ß√µes dos pacotes do projeto
from IA.pdf_qa import PDFQA
from utils.pdf_generator import generate_pdf_report
from auth import auth_utils

# --- Fun√ß√µes de Interface do Streamlit ---

def configurar_pagina():
    """Configura as propriedades da p√°gina Streamlit."""
    st.set_page_config(page_title="Calculadora de Notas VIBRA", page_icon="‚ö°", layout="wide")

def exibir_cabecalho():
    """Exibe o logo e o t√≠tulo principal da aplica√ß√£o."""
    st.image("https://www.movenews.com.br/wp-content/uploads/2022/11/handler.png", width=200)
    st.title("Calculadora de Notas de Treinamento")
    st.markdown("Ferramenta para calcular a nota final dos colaboradores com base nos crit√©rios da Instru√ß√£o de Trabalho `040.010.060.0999.IT`.")

def configurar_barra_lateral():
    """Cria e gerencia todos os widgets da barra lateral."""
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes do Treinamento")
    training_title = st.sidebar.text_input("T√≠tulo do Treinamento", "NR-35 Trabalho em Altura (Te√≥rica)")
    total_oportunidades = st.sidebar.number_input("Total de Oportunidades de Intera√ß√£o", min_value=1, value=4, step=1)
    total_check_ins = st.sidebar.number_input("Total de Check-ins no Dia", min_value=1, value=2, step=1)
    start_time = st.sidebar.time_input("Hor√°rio de In√≠cio do Treinamento", value=time(9, 0))
    training_duration = st.sidebar.number_input("Dura√ß√£o Total (min)", min_value=1, value=240, step=10)
    min_presence = st.sidebar.slider("M√≠nimo de Presen√ßa (%)", min_value=1, max_value=100, value=60, step=1)

    st.sidebar.markdown("---")
    st.sidebar.header("üì• Carregar Lista de Presen√ßa")
    
    uploaded_file = st.sidebar.file_uploader("1. Selecione o arquivo (CSV ou PDF)", type=['csv', 'pdf'])
    
    if 'last_ia_call_time' not in st.session_state:
        st.session_state.last_ia_call_time = 0

    cooldown_seconds = 120
    time_since_last_call = py_time.time() - st.session_state.last_ia_call_time
    
    if time_since_last_call < cooldown_seconds:
        remaining_time = int(cooldown_seconds - time_since_last_call)
        st.sidebar.warning(f"Aguarde {remaining_time} segundos para usar a IA novamente.")
        st.sidebar.button("2. Processar Arquivo com IA", disabled=True)
    elif uploaded_file is not None:
        if st.sidebar.button("2. Processar Arquivo com IA"):
            # Passando os valores padr√£o para a fun√ß√£o de processamento
            processar_arquivo_com_ia(uploaded_file, start_time, training_duration, min_presence, total_check_ins, total_oportunidades)
            st.session_state.dados_processados = None
    else:
        st.sidebar.button("2. Processar Arquivo com IA", disabled=True)

    st.sidebar.markdown("---")
    if st.sidebar.button("‚ûï Adicionar Colaborador Manualmente"):
        if 'colaboradores' not in st.session_state:
            st.session_state.colaboradores = []
        
        # Cria o dicion√°rio j√° com os valores padr√£o
        novo_colaborador = {
            'check_ins_pontuais': total_check_ins,
            'interacoes': total_oportunidades,
            'acertos': 7
        }
        st.session_state.colaboradores.append(novo_colaborador)
        st.session_state.dados_processados = None
    
    return training_title, total_oportunidades, total_check_ins

def processar_arquivo_com_ia(uploaded_file, start_time, training_duration, min_presence, total_check_ins, total_oportunidades):
    """Processa um arquivo (PDF ou CSV) e preenche os colaboradores com valores padr√£o."""
    try:
        if 'pdf_qa_instance' not in st.session_state:
            st.session_state.pdf_qa_instance = PDFQA()
        pdf_qa = st.session_state.pdf_qa_instance
        
        extraction_prompt = """
        Your task is to act as an attendance sheet processor.
        From the provided file (which can be a PDF or a text/csv file), do the following:
        1.  Extract the full name of each participant. The column might be 'Full Name' or 'Nome Completo'.
        2.  Extract the timestamp of each action. The column might be 'Timestamp'.
        3.  Extract the action itself. The column might be 'User Action' or 'Action'. The values are typically 'Joined' and 'Left'.
        4.  Return the data as a clean JSON array of objects. Each object must have three keys: "Full Name", "Timestamp", and "Action".
        5.  Ensure the 'Timestamp' is in the format 'MM/DD/YYYY, HH:MM:SS AM/PM'.
        6.  If a participant joins and leaves multiple times, create a separate JSON object for each action.
        7.  Ignore any header rows or summary information in the file that is not part of the main data table.
        8.  If no valid data is found, return an empty JSON array.
        """
        
        with st.spinner("A IA est√° analisando o arquivo..."):
            extracted_data = pdf_qa.extract_structured_data(uploaded_file, extraction_prompt)

        st.session_state.last_ia_call_time = py_time.time()

        if not extracted_data:
            st.sidebar.warning(f"A IA n√£o encontrou dados de colaborador no arquivo '{uploaded_file.name}'.")
            return

        df = pd.DataFrame(extracted_data)
        
        if 'Full Name' in df.columns and 'Timestamp' in df.columns and 'Action' in df.columns:
            df['Timestamp'] = pd.to_datetime(df['Timestamp'], format='%m/%d/%Y, %I:%M:%S %p', errors='coerce')
            df.dropna(subset=['Timestamp'], inplace=True) 
            df = df.sort_values(by=['Full Name', 'Timestamp'])

            st.session_state.colaboradores = []
            if not df.empty:
                for name, group in df.groupby('Full Name'):
                    total_duration = timedelta(0)
                    last_join_time = None
                    for _, row in group.iterrows():
                        if row['Action'] == 'Joined':
                            last_join_time = row['Timestamp']
                        elif row['Action'] == 'Left' and last_join_time is not None:
                            total_duration += row['Timestamp'] - last_join_time
                            last_join_time = None
                    if last_join_time is not None:
                        total_duration += df['Timestamp'].max() - last_join_time
                    presence_percentage = (total_duration.total_seconds() / (training_duration * 60)) * 100
                    frequencia_ok = presence_percentage >= min_presence
                    
                    st.session_state.colaboradores.append({
                        'nome': name, 
                        'frequencia': frequencia_ok,
                        'check_ins_pontuais': total_check_ins,
                        'interacoes': total_oportunidades,
                        'acertos': 7
                    })
                st.sidebar.success(f"{len(st.session_state.colaboradores)} colaboradores processados via IA!")
            else:
                st.sidebar.warning("Nenhum dado v√°lido de colaborador encontrado no arquivo ap√≥s a filtragem pela IA.")
        else:
            st.sidebar.error(f"A IA n√£o retornou as colunas esperadas. Esperado: 'Full Name', 'Timestamp', 'Action'. Encontrado: {list(df.columns)}")
    except Exception as e:
        st.sidebar.error(f"Erro ao processar com a IA: {e}")

def desenhar_formulario_colaboradores(total_oportunidades: int, total_check_ins: int):
    """Desenha a √°rea principal com o formul√°rio para cada colaborador."""
    st.header("üë§ Dados dos Colaboradores")
    if not st.session_state.get('colaboradores'):
        st.info("Adicione colaboradores manualmente ou carregue uma lista de presen√ßa na barra lateral.")
        return

    st.warning("Confira os dados. A maioria dos campos j√° est√° preenchida com valores padr√£o. Altere apenas o necess√°rio.")

    def on_change_callback():
        """Callback para limpar os resultados calculados sempre que um dado do formul√°rio for alterado."""
        st.session_state.dados_processados = None

    for i, colab in enumerate(st.session_state.colaboradores):
        st.markdown(f"---")
        with st.container():
            cols = st.columns([3, 1, 1, 1, 1])
            colab_key_prefix = f"{colab.get('nome', '')}_{i}"
            
            st.session_state.colaboradores[i]['nome'] = cols[0].text_input(f"Nome do Colaborador {i+1}", value=colab.get('nome', ''), key=f"nome_{colab_key_prefix}", on_change=on_change_callback, placeholder="Nome completo do colaborador")
            st.session_state.colaboradores[i]['check_ins_pontuais'] = cols[1].number_input("Check-ins Pontuais", min_value=0, max_value=total_check_ins, step=1, key=f"check_ins_{colab_key_prefix}", value=colab.get('check_ins_pontuais'), on_change=on_change_callback)
            st.session_state.colaboradores[i]['interacoes'] = cols[2].number_input("Intera√ß√µes V√°lidas", min_value=0, max_value=total_oportunidades, step=1, key=f"interacoes_{colab_key_prefix}", value=colab.get('interacoes'), on_change=on_change_callback)
            st.session_state.colaboradores[i]['acertos'] = cols[3].number_input("Acertos na Prova", min_value=0, max_value=10, step=1, key=f"acertos_{colab_key_prefix}", value=colab.get('acertos'), on_change=on_change_callback)
            st.session_state.colaboradores[i]['frequencia'] = cols[4].checkbox("Frequ√™ncia OK?", value=colab.get('frequencia', False), key=f"frequencia_{colab_key_prefix}", on_change=on_change_callback)

def validar_dados_colaboradores() -> bool:
    """Verifica se todos os campos obrigat√≥rios para cada colaborador foram preenchidos."""
    if not st.session_state.get('colaboradores'):
        st.error("N√£o h√° colaboradores na lista para validar.")
        return False

    dados_incompletos = []
    for i, colab in enumerate(st.session_state.colaboradores):
        nome = colab.get('nome', '').strip()
        check_ins = colab.get('check_ins_pontuais')
        interacoes = colab.get('interacoes')
        acertos = colab.get('acertos')

        if not nome or check_ins is None or interacoes is None or acertos is None:
            dados_incompletos.append(f"Colaborador {i+1} (Nome: {nome or 'Vazio'})")
    
    if dados_incompletos:
        st.error("**Dados Incompletos!** Por favor, preencha todos os campos para os seguintes colaboradores antes de calcular:")
        for item in dados_incompletos:
            st.warning(f"- {item}")
        return False
        
    return True

def exibir_tabela_resultados(dados_processados: list):
    """Mostra o DataFrame com os resultados na tela."""
    if not dados_processados:
        st.error("Nenhum dado para exibir.")
        return
        
    st.header("üèÜ Resultados Finais")
    df_resultados = pd.DataFrame(dados_processados)
    
    def highlight_status(row):
        if row['Status'] == 'Aprovado': return ['background-color: #d4edda'] * len(row)
        elif 'Reprovado' in row['Status']: return ['background-color: #f8d7da'] * len(row)
        return [''] * len(row)

    display_df = df_resultados[["Colaborador", "Nota Pontualidade", "Nota Intera√ß√£o", "Nota Avalia√ß√£o", "Nota Final", "Status"]]
    st.dataframe(display_df.style.apply(highlight_status, axis=1).format({ "Nota Pontualidade": "{:.2f}", "Nota Intera√ß√£o": "{:.2f}", "Nota Avalia√ß√£o": "{:.2f}", "Nota Final": "{:.2f}", }), use_container_width=True)

def exibir_botao_pdf(dados_processados: list, training_title: str):
    """Mostra o bot√£o para gerar e baixar o relat√≥rio em PDF."""
    st.markdown("---")
    
    df_resultados = pd.DataFrame(dados_processados)
    logo_url = "https://drive.google.com/uc?export=download&id=1AABdw4iGBJ7tsQ7fR1WGTP5cML3Jlfx_"
    
    with st.spinner("Preparando dados do relat√≥rio..."):
        pdf_data = generate_pdf_report(df_resultados, logo_url, training_title)
    
    st.download_button(label="üìÑ Baixar Relat√≥rio Detalhado em PDF", data=pdf_data, file_name=f"relatorio_{training_title.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.pdf", mime="application/pdf")

def exibir_pagina_admin():
    """Desenha a interface da p√°gina de administra√ß√£o."""
    auth_utils.check_admin_permission()
    
    st.header("‚öôÔ∏è Painel de Administra√ß√£o")
    st.info("Esta √°rea √© restrita para administradores do sistema.")
    
    tab1, tab2 = st.tabs(["Gerenciar Usu√°rios", "Outras Configura√ß√µes"])
    
    with tab1:
        st.subheader("Usu√°rios Autorizados")
        st.markdown("A lista abaixo √© carregada diretamente do arquivo de segredos (`secrets.toml`) da aplica√ß√£o. Para adicionar, remover ou alterar permiss√µes, voc√™ deve editar este arquivo e reiniciar a aplica√ß√£o.")
        try:
            users_df = auth_utils.get_users_for_display()
            st.dataframe(users_df, use_container_width=True)
        except Exception as e:
            st.error(f"N√£o foi poss√≠vel carregar a lista de usu√°rios: {e}")

    with tab2:
        st.subheader("Configura√ß√µes Futuras")
        st.write("Esta √°rea pode ser usada para outras configura√ß√µes do sistema.")
        if st.button("Limpar Cache de Dados"):
            st.cache_data.clear()
            st.success("O cache de dados foi limpo com sucesso!")
